#! /usr/bin/env nop

include time.ns

( Formatter )
8 value /date
5 value /frame

: d>c   [char] 0 + ;
: c>d   [char] 0 - ;

: ten@ ( a -> n )   a!  1@+ c>d 10 *  1@+ c>d  + ;
: ten! ( n a -> )   a!  10 /mod  d>c 1!+  d>c 1!+ ;

: time@ ( a -> n )   ten@ 100 *  a ten@ + ;
: time! ( n a -> )   push 100 /mod pop ten!  a ten! ;

: frame@ ( a -> time status )   a! 1@+ push  a time@  pop ;
: frame! ( time status a -> )   a! 1!+  a time! ;

: date@ ( a -> n )     /date number drop ;
: date! ( date a -> )
   a!  100 /mod 100 /mod 100 /mod a ten! a ten! a ten! a ten! ;

( Time )
: time>min ( time -> n )   100 /mod push  60 /mod  pop + 60 *  + ;
: min>time ( n -> time )   60 /mod  100 *  + ;

: timeop ( t1 t2 op -> t3 )
   push  time>min swap time>min swap  pop execute  min>time ;

: t- ( t t' -> t-t' )   ['] - timeop ;
: t+ ( t t' -> t+t' )   ['] + timeop ;

create ts /timespec allot
create tm /tm allot
: systime ( -> 'tm )
   ts realtime 0 ~= " systime: can't retrieve time" ?abort
   ts tv-sec tm localtime_r  dup 0 = " error converting time" ?abort ;

: 4@                   @ $FFFFFFFF and ;
: year ( ->year )      systime tm-year 4@ 1900 + ;   \ systime outputs an offset from 1900
: month ( -> month )   systime tm-mon 4@ 1 + ;       \ systime outputs January as 0
: mday ( -> day )      systime tm-mday 4@ ;
: hour ( -> time )     systime tm-hour 4@ ;
: minute ( -> time )   systime tm-min 4@ ;

: day ( -> date )   year 10000 *  month 100 * +  mday + ;
: now ( -> time )   hour 100 * minute + ;


( File )
$1A4 value -rw-r--r--
   2 value r/w
  -1 value file
   0 value SEEK_SET

: open ( path -> fd )
  dup str>mem r/w 0 open-file  dup 0 >= if nip exit then
  drop dup str>mem -rw-r--r-- create-file dup 0 >= if  sysclose drop open exit then
  drop drop " can't open nor create taccfile" ?abort ;

: setup ( path -> )      open to file ;
: (read) ( a u -> u' )   file read-line  dup 0 < " failed to read line" ?abort ;
: trim ( u a -> u' )     over 1 -  +  1@  10 = if 1 - then ;
: read ( a u -> u' )     over push  (read)  pop trim ;
: write ( a u -> )       file write-line  0 < " failed to write line" ?abort ;
: position@ ( -> u )     file file-position ;
: position! ( u -> )     SEEK_SET file sysseek  -1 = " failed to seek" ?abort ;


( Line )
64 value /line
create line /line allot
variable #line
create orig-line /line allot
variable #orig-line
variable offset

: orig>line   orig-line line #orig-line @ move  #orig-line @ #line ! ;
: line>orig   line orig-line #line @ move  #line @ #orig-line ! ;
: offset! ( n -> )   1 + position@ swap -  offset ! ;

: line! ( -> u )   \ only overwrite line if something was read
   orig-line /line read  dup 0 = if exit then
   dup #orig-line !  orig>line  dup offset! ;

: .line   line #line @ type cr ;
: ff      begin line! while repeat ;

: #frames   #line @  /date -  /frame / ;
: .frames   begin line! while cr #frames . repeat ;

: 'frame ( u -> a )            /frame *  /date + line + ;
: frame ( u -> time status )   'frame frame@ ;
: last ( -> u )                #frames 1 - ;

( User commands )
char + value opentag
    bl value closetag

: open? ( status -> f )    opentag = ;
: closed? ( status -> f )  closetag = ;

: stop ( time -> )
   #frames 0 = if exit then
   last frame closed? if drop exit then
   t-  closetag  last 'frame frame!
   .line ;

: start ( time -> )
   last frame open? " Frame open, close it first" ?abort drop
   opentag  #frames 'frame frame!  /frame #line +!
   .line ;

: revert   orig>line ;
: commit   offset @ position!  line #line @ write  line>orig ;

: total ( -> u )   0  #frames 1 - for  r@ 1 - frame drop t+  next ;
: # ( -> time )
   total  last frame closed? if  t+ . cr exit  then
   now swap t-  + . cr ;

: +  t+ ;
: -  t- ;

( Initialization )
: init
   line date@ day = if exit then
   0 #line !  day line date!  /date #line +!  position@ offset !
   commit ;

anon:
   " TACCFILE" getenv  dup 0 = if  " TACCFILE?" println bye  then
   here push  str>mem str,  pop setup ff init
   term-loop
; execute

